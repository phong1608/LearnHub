

generator client {
  provider = "prisma-client-js"
}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  userType   UserType @default(Student)
  password  String
  bio       String?
  profilePicture String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  enrollments Enrollment[]
  ratings     Rating[]
  Cart  Cart?
  Instructor Instructor[]

  Comment Comment[]
}
enum UserType {
  Student
  Instructor
  
}
model Instructor{
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Course Course[]

  Revenue Revenue[]
}



model Course{
  id          String   @id @default(cuid())
  name        String
  description String
  thumbnail   String
  instructorId String
  instructor Instructor @relation(fields: [instructorId], references: [id])
  level       CourseLevel
  price       Float
  isPublished Boolean @default(false)
  enrollments Enrollment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Section Section[]
  Rating Rating[]
  CartItem CartItem[]

  Discount Discount[]

  CategoryId String
  category Category @relation(fields: [CategoryId], references: [id])
}

model Category{
  id        String   @id @default(cuid())
  name      String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course Course[]
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}
model Cart{
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  cartItems CartItem[]
}

model CartItem {
  @@id([cartId, courseId])
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Section{
  id        String   @id @default(cuid())
  name      String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  lessons   Lesson[]
  position  Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@unique([courseId, position])

}

model Lesson{
  id        String   @id @default(cuid())
  name      String
  sectionId String
  lessonType LessonType
  section   Section  @relation(fields: [sectionId], references: [id])
  position  Int 
  attachment String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessonVideo LessonVideo?
  lessonText LessonText?
  Comment Comment[]
  Enrollment Enrollment[]
  @@unique([sectionId, position])
}
enum LessonType {
  Video
  Text
}

model LessonVideo{
  id        String   @id @default(cuid())
  lessonId  String   @unique
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  videoUrl  String
  createdAt DateTime @default(now())
  summarize String?
  updatedAt DateTime @updatedAt
}
model LessonText{
  id String @id @default(cuid())
  lessonId String @unique
  lesson Lesson @relation(fields: [lessonId], references: [id])
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Discount{
  id        String   @id @default(cuid())
  code      String   @unique
  courseId  String   @unique
  course    Course   @relation(fields: [courseId], references: [id])
  type      DiscountType
  amount    Float
  public   Boolean @default(false)
  expiredAt DateTime?
  status    DiscountStatus @default(Active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DiscountStatus {
  Active
  Expired
  Disabled
  
}
enum DiscountType {
  Percentage
  Fixed
}

model Enrollment{
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  lessonId String?
  lesson    Lesson?   @relation(fields: [lessonId], references: [id])
  rating    Int?
  @@unique([userId, courseId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Rating{
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  rating    Int
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  parentId  String?
}

model Revenue{
  id        String   @id @default(cuid())
  instructorId String
  instructor Instructor @relation(fields: [instructorId], references: [id])
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}